
class Robot : public SampleRobot
{


public:
        Robot()
        {
        }

        void RobotInit() {

                
}

        void Autonomous(void)
        {
                Wait(2.0);                              //    for 10 seconds
        }

        /**
         * Runs the motors with arcade steering.
         */
        void OperatorControl(void)
        {
                while (IsOperatorControl())
                {
                        if ( first_iteration ) {
                    bool is_calibrating = imu->IsCalibrating();
                    if ( !is_calibrating ) {
                        Wait( 0.3 );
                        imu->ZeroYaw();
                        first_iteration = false;
                    }
                        }
                        SmartDashboard::PutBoolean( "IMU_Connected", imu->IsConnected());
                        SmartDashboard::PutNumber("IMU_Yaw", imu->GetYaw());
                        SmartDashboard::PutNumber("IMU_Pitch", imu->GetPitch());
                        SmartDashboard::PutNumber("IMU_Roll", imu->GetRoll());
                        SmartDashboard::PutNumber("IMU_CompassHeading", imu->GetCompassHeading());
                        SmartDashboard::PutNumber("IMU_Update_Count", imu->GetUpdateCount());
                        SmartDashboard::PutNumber("IMU_Byte_Count", imu->GetByteCount());

#if defined (ENABLE_IMU_ADVANCED) || defined(ENABLE_AHRS)
                        SmartDashboard::PutNumber("IMU_Accel_X", imu->GetWorldLinearAccelX());
                        SmartDashboard::PutNumber("IMU_Accel_Y", imu->GetWorldLinearAccelY());
                        SmartDashboard::PutBoolean("IMU_IsMoving", imu->IsMoving());
                        SmartDashboard::PutNumber("IMU_Temp_C", imu->GetTempC());
            SmartDashboard::PutBoolean("IMU_IsCalibrating", imu->IsCalibrating());
#if defined (ENABLE_AHRS)
            SmartDashboard::PutNumber("Velocity_X",             imu->GetVelocityX() );
            SmartDashboard::PutNumber("Velocity_Y",             imu->GetVelocityY() );
            SmartDashboard::PutNumber("Displacement_X",     imu->GetDisplacementX() );
            SmartDashboard::PutNumber("Displacement_Y",     imu->GetDisplacementY() );
#endif
#endif
                        Wait(0.2);                              // wait for a while
                }
        }

        /**
         * Runs during test mode
         */
        void Test() {

        }

};

START_ROBOT_CLASS(Robot);